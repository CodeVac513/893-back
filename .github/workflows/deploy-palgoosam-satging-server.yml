name: Deploy To Staging Server

on:
  push:
    branches:
      - develop
  workflow_dispatch: # 수동 실행을 허용하는 이벤트

jobs:
  Deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Github Repository 파일 불러오기
        uses: actions/checkout@v4

      - name: JDK 21버전 설치
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21

      - name: 폴더 구조 생성
        run: mkdir -p ./src/main/resources/properties

      - name: env.production.properties 파일 만들기
        run: |
          cat > ./src/main/resources/properties/env.production.properties << 'EOF'
          ${{ secrets.ENV_STAGING_PROPERTIES }}
          EOF

      - name: application.yml 파일 만들기
        run: |
          cat > ./src/main/resources/application.yml << 'EOF'
          ${{ vars.APPLICATION_YML }}
          EOF

      - name: yml, properties 확인
        run: |
          cat ./src/main/resources/application.yml
          cat ./src/main/resources/properties/env.production.properties

      - name: 테스트 및 빌드하기
        run: |
          cat ./src/main/resources/application.yml
          cat ./src/main/resources/properties/env.production.properties
          chmod 755 ./gradlew 
          ./gradlew clean build -x test

      - name: AWS 리소스에 접근하도록 돕는 AWS credentials 설정
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: ECR에 로그인
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Docker 이미지 생성
        run: docker build -t 893-back .

      - name: Docker 이미지에 태그 붙이기
        run: docker tag 893-back ${{ steps.login-ecr.outputs.registry }}/893-back:latest

      - name: ECR에 Docker 이미지 Push
        run: docker push ${{ steps.login-ecr.outputs.registry }}/893-back:latest

      - name: Install netcat for connection testing
        run: sudo apt-get update && sudo apt-get install -y netcat-openbsd

      - name: EIC 터널 생성 및 배포
        run: |
          aws ec2-instance-connect open-tunnel \
            --instance-connect-endpoint-id ${{ secrets.AWS_EIC_ENDPOINT }} \
            --remote-port ${{ secrets.CLIENT_SSH_PORT }} \
            --local-port ${{ secrets.EC2_STAGING_SSH_PORT }} \
            --instance-id ${{ secrets.AWS_EC2_STAGING_ID }} &
          
          TUNNEL_PID=$!
          echo "Tunnel PID: $TUNNEL_PID"
          
          echo "Waiting for tunnel to establish..."
          for i in {1..30}; do
            if nc -z 127.0.0.1 ${{ secrets.EC2_STAGING_SSH_PORT }}; then
              echo "SSH tunnel is ready!"
              break
            fi
            echo "Waiting for tunnel... ($i/30)"
            sleep 2
          done
          
          if ! nc -z 127.0.0.1 ${{ secrets.EC2_STAGING_SSH_PORT }}; then
            echo "Failed to establish SSH tunnel"
            kill $TUNNEL_PID 2>/dev/null || true
            exit 1
          fi

      - name: 터널 상태 재확인
        run: |
          echo "터널 프로세스 상태:"
          ps aux | grep ec2-instance-connect || echo "터널 프로세스 없음"
          
          echo "포트 연결 테스트:"
          nc -zv 127.0.0.1 ${{ secrets.EC2_STAGING_SSH_PORT }} || echo "포트 연결 실패"

      - name: 직접 SSH로 배포
        run: |
          echo "${{ secrets.EC2_STAGING_SSH_PORT }}" > /tmp/ssh_key
          chmod 600 /tmp/ssh_key
          
          # 변수 미리 설정
          ECR_REGISTRY="${{ steps.login-ecr.outputs.registry }}"
          SERVER_PORT="${{ secrets.PALGOOSAM_API_SERVER_PORT }}"
          AWS_REGION="${{ secrets.AWS_REGION }}"
          
          ssh -o StrictHostKeyChecking=no \
              -i /tmp/ssh_key \
              -p ${{ secrets.EC2_STAGING_SSH_PORT }} \
              ${{ secrets.EC2_USERNAME }}@127.0.0.1 << EOF
          
          echo "=== 배포 시작 ==="
          
          # ECR 로그인
          aws ecr get-login-password --region ${AWS_REGION} | \
            docker login --username AWS --password-stdin ${ECR_REGISTRY}
          
          # 기존 컨테이너 정리
          docker stop 893-back-container || true
          docker rm 893-back-container || true
          docker system prune -a -f || true
          
          # 새 이미지 풀 및 실행
          docker pull ${ECR_REGISTRY}/893-back:latest
          docker run -d --name 893-back-container \
            -p ${SERVER_PORT}:${SERVER_PORT} \
            ${ECR_REGISTRY}/893-back:latest
          
          echo "=== 배포 완료 ==="
          docker ps | grep 893-back
          
          EOF
          
          rm /tmp/ssh_key
