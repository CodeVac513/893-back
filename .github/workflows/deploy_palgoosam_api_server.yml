name: Deploy To EC2

on:
  push:
    branches:
      - main
  workflow_dispatch: # 수동 실행을 허용하는 이벤트

jobs:
  Deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Github Repository 파일 불러오기
        uses: actions/checkout@v4

      - name: JDK 21버전 설치
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21

      - name: 폴더 구조 생성
        run: mkdir -p ./src/main/resources/properties

      - name: application.yml 파일 만들기
        run: echo "${{ secrets.APPLICATION_PROPERTIES }}" > ./src/main/resources/application.yml

      - name: env.production.properties 파일 만들기
        run: echo "${{ secrets.ENV_PRODUCTION_PROPERTIES }}" > ./src/main/resources/properties/env.production.properties

      - name: 테스트 및 빌드하기
        run: ./gradlew clean build

      - name: AWS 리소스에 접근하도록 돕는 AWS credentials 설정
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: ECR에 로그인
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Docker 이미지 생성
        run: docker build -t 893-back .

      - name: Docker 이미지에 태그 붙이기
        run: docker tag 893-back ${{ steps.login-ecr.outputs.registry }}/893-back:latest

      - name: ECR에 Docker 이미지 Push
        run: docker push ${{ steps.login-ecr.outputs.registry }}/893-back:latest

      - name: Install netcat for connection testing
        run: sudo apt-get update && sudo apt-get install -y netcat

      - name: EIC 터널 생성 및 배포
        run: |
          aws ec2-instance-connect open-tunnel \
            --instance-connect-endpoint-id ${{ secrets.AWS_EIC_ENDPOINT }} \
            --remote-port ${{ secrets.CLIENT_SSH_PORT }} \
            --local-port ${{ secrets.EC2_SSH_PORT }} \
            --instance-id ${{ secrets.AWS_EC2_ID }} &
          
          TUNNEL_PID=$!
          echo "Tunnel PID: $TUNNEL_PID"
          
          echo "Waiting for tunnel to establish..."
          for i in {1..30}; do
            if nc -z localhost ${{ secrets.EC2_SSH_PORT }}; then
              echo "SSH tunnel is ready!"
              break
            fi
            echo "Waiting for tunnel... ($i/30)"
            sleep 2
          done
          
          if ! nc -z localhost ${{ secrets.EC2_SSH_PORT }}; then
            echo "Failed to establish SSH tunnel"
            kill $TUNNEL_PID 2>/dev/null || true
            exit 1
          fi

      - name: SSH로 EC2에 접속하기 (EIC 터널 사용)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: localhost
          port: ${{ secrets.EC2_SSH_PORT }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.AWS_EC2_SSH_KEY }}
          script_stop: true
          script: |
            docker stop 893-back-container || true
            docker rm 893-back-container || true
            docker pull ${{ steps.login-ecr.outputs.registry }}/893-back:latest
            docker run -d --name 893-back-container -p ${{ secrets.PALGOOSAM_API_SERVER_PORT }}:${{ secrets.PALGOOSAM_API_SERVER_PORT }} ${{ steps.login-ecr.outputs.registry }}/893-back:latest